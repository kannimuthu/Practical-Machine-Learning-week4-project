# Download dataset from the web and save it to the disk for later use
training_data_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test_data_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
training_data <- fread(training_data_url)
---
title: "My Website"
---
Hello, Website!
For more information about simple R Markdown websites, please read the documentation at https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html.
Please also note that simple R Markdown sites are _not_ based on **blogdown**. They are probably good for websites with only a few Rmd documents. For larger-scale and more sophisticated websites (such as blogs), you may want to use **blogdown** instead: https://github.com/rstudio/blogdown.
```{r}
# Download dataset from the web and save it to the disk for later use
training_data_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test_data_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
training_data <- fread(training_data_url)
test_data <- fread(test_data_url)
saveRDS(training_data,'training_data.Rdata')
saveRDS(test_data,'test_data.Rdata')
```
library(rpart)
test_data <- readRDS("test_data.Rdata")
install.packages("repmis")
# Download dataset from the web and save it to the disk for later use
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
library(repmis)
training.raw <- read.csv("pml-training.csv")
testing.raw <- read.csv("pml-testing.csv")
dim(training.raw)
---
title: "Predictions of using the Weight Lifting Exercises Dataset"
---
Hello, Website!
For more information about simple R Markdown websites, please read the documentation at https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html.
Please also note that simple R Markdown sites are _not_ based on **blogdown**. They are probably good for websites with only a few Rmd documents. For larger-scale and more sophisticated websites (such as blogs), you may want to use **blogdown** instead: https://github.com/rstudio/blogdown.
We’ll take the following steps:
Process the data, for use of this project
Explore the data, especially focussing on the two paramaters we are interested in
Model selection, where we try different models to help us answer our questions
Model examination, to see wether our best model holds up to our standards
A Conclusion where we answer the questions based on the data
Predicting the classification of the model on test set
Processing
First change ‘am’ to factor (0 = automatic, 1 = manual) And make cylinders a factor as well (since it is not continious)
```{r}
# Download dataset from the web and save it to the disk for later use
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
library(repmis)
training.raw <- read.csv("pml-training.csv")
testing.raw <- read.csv("pml-testing.csv")
```
Exploratory data analyses
Look at the dimensions & head of the dataset to get an idea
```{r}
dim(training.raw)
```
Removal of data with NA / empty values
```{r}
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
```
Removal of time related data, since we won’t use
```{r}
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
```
Convertion all factors to integer values
```{r}
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
```
Set the cleaned data
```{r}
training.cleaned <- training.cleaned03
testing.cleaned <- testing.cleaned03
```
Exploratory Data Analysis
Split the current training in a test and train set
```{r}
set.seed(19791108)
library(caret)
classeIndex <- which(names(training.cleaned) == "classe")
partition <- createDataPartition(y=training.cleaned$classe, p=0.75, list=FALSE)
training.subSetTrain <- training.cleaned[partition, ]
training.subSetTest <- training.cleaned[-partition, ]
```
Find field that has high correlations
```{r}
correlations <- cor(training.subSetTrain[, -classeIndex], as.numeric(training.subSetTrain$classe))
bestCorrelations <- subset(as.data.frame(as.table(correlations)), abs(Freq)>0.3)
bestCorrelations
```
# Download dataset from the web and save it to the disk for later use
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
library(repmis)
training.raw <- read.csv("pml-training.csv")
testing.raw <- read.csv("pml-testing.csv")
dim(training.raw)
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
classeLevels <- levels(training.cleaned02$classe)
dim(classeLevels)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
classeLevels <- levels(training.cleaned02$classe)
dim(training.cleaned02$classe)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
classeLevels <- levels(training.cleaned02$classe)
dim(training.cleaned02$classe)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
dim(training.cleaned01)
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
dim(training.cleaned02)
classeLevels <- levels(training.cleaned02$classe)
dim(training.cleaned02$classe)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
classeLevels <- levels(training.cleaned02[160])
classeLevels <- levels(training.cleaned02[:,160])
classeLevels <- levels(training.cleaned02[:,159])
classeLevels <- levels(training.cleaned02(1:2))
classeLevels <- levels(training.cleaned02[0])
dim(training.cleaned02$classe)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
classeLevels <- levels(training.cleaned02)
dim(training.cleaned02$classe)
#training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
#training.cleaned03$classe <- factor(training.cleaned03$classe,labels=classeLevels)
#testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02[,ncol(training.cleaned02)])
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02[,ncol(training.cleaned02)])
dim(classeLevels)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
dim(training.cleaned02)
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
classeLevels <- levels(training.cleaned02[,ncol(training.cleaned02)])
dim(training.cleaned02)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02[,ncol(training.cleaned02)])
dim(classeLevels)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02[,0])
dim(classeLevels)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
classeLevels <- levels(training.cleaned02$magnet_forearm_z)
dim(classeLevels)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
data_dir = "./data"
training_url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training_file = "pml-training.csv"
test_file = "pml-test.csv"
if (!file.exists(data_dir)) {
dir.create(data_dir)
}
if (!file.exists(file.path(data_dir, training_file))) {
download.file(training_url, destfile=file.path(data_dir, training_file))
}
if (!file.exists(file.path(data_dir, test_file))) {
download.file(test_url, destfile=file.path(data_dir, test_file))
}
train <- read.csv(file.path(data_dir, training_file))
test <- read.csv(file.path(data_dir, test_file))
dim(train)
dim(test)
head(train)
sum(complete.cases(train))
colnames(train)
plot(colMeans(is.na(train)))
trainClasse = train$classe
trainRaw = train[, sapply(train, is.numeric)]
testRaw = test[, sapply(test, is.numeric)]
trainFilter <- trainRaw[, colSums(is.na(trainRaw)) == 0]
# Attach Classe variable
trainFilter$classe = trainClasse
testFilter <- testRaw[, colSums(is.na(testRaw)) == 0]
dim(trainFilter)
dim(testFilter)
unwanted = !grepl("X|timestamp", colnames(trainFilter))
cols = colnames(trainFilter)[unwanted]
trainFilter = trainFilter %>%
select(cols)
unwanted = !grepl("X|timestamp", colnames(trainFilter))
cols = colnames(trainFilter)[unwanted]
trainFilter = trainFilter
select(cols)
unwanted = !grepl("X|timestamp", colnames(trainFilter))
cols = colnames(trainFilter)[unwanted]
trainFilter = trainFilter
#select(cols)
unwanted = !grepl("X|timestamp", colnames(testFilter))
cols = colnames(testFilter)[unwanted]
testFilter = testFilter
#select(cols)
dim(trainFilter)
dim(testFilter)
set.seed(12022018) # Today's date
inTrain <- createDataPartition(trainFilter$classe, p=0.70, list=F)
trainData <- trainFilter[inTrain, ]
validationData <- trainFilter[-inTrain, ]
dim(trainData)
controlRf <- trainControl(method="cv", 5, allowParallel = TRUE)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
predict_rf <- predict(modelRf, validationData)
confusionMatrix(validationData$classe, predict_rf)
predict_rf <- predict(modelRf, validationData)
predict_rf <- predict(modelRf, validationData)
controlXGB <- trainControl(method="cv", 5, allowParallel = TRUE)
modelXGB <- train(classe ~ ., data=trainData, method="xgbTree", trControl=controlXGB)
